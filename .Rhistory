)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visnet
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "type.label")
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
label = type.label,
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
)
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
type.label = label,
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "type.label")
vis.nodes$label  <- vis.nodes$type.label
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
type.label = unique(label),
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "type.label")
vis.nodes$label  <- vis.nodes$type.label
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
type.label = label,
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "type.label")
vis.nodes$label  <- vis.nodes$type.label
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
vis.nodes$label  <- vis.nodes$type.label
visnet
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
shadow.enabled = TRUE
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
visHierarchicalLayout(visnet)
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black"
shadow = TRUE
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
visHierarchicalLayout(visnet)
visnet
visHierarchicalLayout(visnet)
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
label <- c(
"A&O SCI 90", "all of", "1 of", "EPS SCI 71", "C&EE 20M", "COMPTNG 10A",
"1 of", "all of", "MATH 3A", "MATH 3B", "all of", "MATH 31A", "MATH 31B",
"1 of", "PHYSICS 1A", "PHYSICS 5A", "PHYSICS 6A"
)
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black",
shadow = TRUE,
level = 1:length(label)
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
visHierarchicalLayout(visnet, direction = "LR")
visnet
visHierarchicalLayout(visnet, direction = "LR")
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black",
shadow = TRUE,
level = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
)
vis.nodes <- tibble(
id = 1:length(label),
label = label,
arrows = "to",
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black",
shadow = TRUE,
level = c(1, 2, 3, 4, 4, 4, 3, 4, 5, 5, 4, 5, 5, 3, 4, 4, 4)
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visOptions(visnet, highlightNearest = TRUE, selectedBy = "label")
visHierarchicalLayout(visnet, direction = "LR")
visnet
visHierarchicalLayout(visnet, direction = "LR")
visHierarchicalLayout(visnet, direction = "UD")
visnet %>%
visOptions(highlightNearest = TRUE, selectedBy = "label") %>%
visHierarchicalLayout(direction = "UD")
?visOptions
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visnet %>%
visOptions(highlightNearest = TRUE, collapse = TRUE) %>%
visHierarchicalLayout(direction = "UD")
# visnet
visnet
vis.nodes <- tibble(
id = 1:length(label),
label = label,
shape = "circle",
color.background = c("yellow", rep("white", length(label) - 1)),
color.border = "black",
shadow = TRUE,
level = c(1, 2, 3, 4, 4, 4, 3, 4, 5, 5, 4, 5, 5, 3, 4, 4, 4)
)
vis.links <- tibble(
from = c(1, 2, 3, 3, 3, 2, 7, 8, 8,  7,  11, 11, 2,  14, 14, 14),
to =   c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17),
color = "black",
arrows = "to"
)
visnet <- visNetwork(vis.nodes, vis.links, main = "A&O SCI 90 Requisites")
visnet %>%
visOptions(highlightNearest = TRUE, collapse = TRUE) %>%
visHierarchicalLayout(direction = "UD")
# visnet
library(readxl)
library(dplyr)
library(stringr)
requisites <- read_xlsx("curricular_complexity_data_codebook.xlsx", sheet = 1)
transfer <- read_xlsx("curricular_complexity_ttd_data_v2.xlsx", sheet = 1)
requisites
requisites_proper %>% View()
requisites %>% View()
all_courses <- requisites_proper %>%
select(course, reqs) %>%
unlist(use.names = FALSE)
requisites_proper <- requisites %>%
# Remove leading zeroes from the course catalog number.
mutate(crs_catlg_no = str_replace(crs_catlg_no, "^0+", ""),
rqs_crs_catlg_no = str_replace(rqs_crs_catlg_no, "^0+", ""),
course = paste(subj_area_cd, crs_catlg_no),
reqs = paste(rqs_subj_area_cd, rqs_crs_catlg_no)) %>%
# Tranpose the prefix for every course. "a" is just a placeholder that
# indicates that we want vapply to return a character string.
mutate(course = vapply(course, transpose_prefix, "a", USE.NAMES = FALSE),
reqs = vapply(reqs, transpose_prefix, "a", USE.NAMES = FALSE)) %>%
select(course, reqs, everything())
all_courses <- requisites_proper %>%
select(course, reqs) %>%
unlist(use.names = FALSE)
transpose_prefix <- function(string){
prefix <- str_extract(string, "(?<= |L)[CM]{1,2}$")
first_digit <- str_extract(string, "\\d")
# If the prefix is preceded by a space or an "L" (lab class), extract it.
# This avoids extracting a "prefix" that is actually part of the course
# number, such as "PSYCH 119M" or "STATS 100C".
# Otherwise, return the original string; no prefix exists.
if(!is.na(first_digit) & !is.na(prefix)){
string %>%
str_replace("(?<= |L)[CM]{1,2}$", "") %>%
str_replace("\\d", paste0(prefix, first_digit)) %>%
str_trim() %>%
return()
} else {
return(string)
}
}
# Create a "proper" table of requisites that has full and correct course names.
requisites_proper <- requisites %>%
# Remove leading zeroes from the course catalog number.
mutate(crs_catlg_no = str_replace(crs_catlg_no, "^0+", ""),
rqs_crs_catlg_no = str_replace(rqs_crs_catlg_no, "^0+", ""),
course = paste(subj_area_cd, crs_catlg_no),
reqs = paste(rqs_subj_area_cd, rqs_crs_catlg_no)) %>%
# Tranpose the prefix for every course. "a" is just a placeholder that
# indicates that we want vapply to return a character string.
mutate(course = vapply(course, transpose_prefix, "a", USE.NAMES = FALSE),
reqs = vapply(reqs, transpose_prefix, "a", USE.NAMES = FALSE)) %>%
select(course, reqs, everything())
all_courses <- requisites_proper %>%
select(course, reqs) %>%
unlist(use.names = FALSE)
get_immediate_reqs <- function(course_name, requisites = requisites_proper){
if(course_name %in% requisites$course){
reqs_table <- requisites %>%
filter(course == course_name)
immediate_reqs <- reqs_table %>%
pull(reqs)
or_count <- reqs_table %>%
pull(lgc_conn_cd) %>%
str_count("OR") %>%
sum(na.rm = TRUE)
return(list(reqs = immediate_reqs, or_count = or_count))
} else {
return(list(reqs = NULL, or_count = 0))
}
}
# Create a "proper" table of requisites that has full and correct course names.
requisites_clean <- requisites %>%
# Remove leading zeroes from the course catalog number.
mutate(crs_catlg_no = str_replace(crs_catlg_no, "^0+", ""),
rqs_crs_catlg_no = str_replace(rqs_crs_catlg_no, "^0+", ""),
course = paste(subj_area_cd, crs_catlg_no),
reqs = paste(rqs_subj_area_cd, rqs_crs_catlg_no)) %>%
# Tranpose the prefix for every course. "a" is just a placeholder that
# indicates that we want vapply to return a character string.
mutate(course = vapply(course, transpose_prefix, "a", USE.NAMES = FALSE),
reqs = vapply(reqs, transpose_prefix, "a", USE.NAMES = FALSE)) %>%
select(course, reqs, everything())
get_immediate_reqs("MATH 32A")
get_immediate_reqs("MATH 32B")
rm(requisites_proper)
requisites_clean %>% filter(course == "MATH 32B")
requisites_clean %>% filter(course == "MATH 32A")
get_immediate_reqs("PSYCH 110")
# fix me!
get_immediate_reqs <- function(course_name, requisites = requisites_clean){
if(course_name %in% requisites$course){
reqs_table <- requisites %>%
filter(course == course_name)
immediate_reqs <- reqs_table %>%
pull(reqs)
or_count <- reqs_table %>%
pull(lgc_conn_cd) %>%
str_count("OR") %>%
sum(na.rm = TRUE)
return(list(reqs = immediate_reqs, or_count = or_count))
} else {
return(list(reqs = NULL, or_count = 0))
}
}
get_immediate_reqs("PSYCH 110")
reqs_table <- requisites %>% filter(course == "A&O SCI 90")
reqs_table <- requisites_proper %>% filter(course == "A&O SCI 90")
reqs_table <- requisites_clean %>% filter(course == "A&O SCI 90")
reqs_table
reqs_table$rqs_seq_num %% 10
reqs_table$rqs_seq_num %/% 10
reqs_table$rqs_seq_num
reqs_table$rqs_seq_num %>% as.integer
reqs_table$rqs_seq_num %>% as.integer %>% %/%
as.integer(reqs_table$rqs_seq_num) %/% 10
as.integer(reqs_table$rqs_seq_num) %/% 100
as.integer(reqs_table$rqs_seq_num) %/% 100 %>% unique()
as.integer(reqs_table$rqs_seq_num) %/% 100 %>% unique() -> num_levels
num_levels
length(num_levels)
requisites_clean %>% filter(course == "MATH 32B")
course_name <- "A&O SCI 90"
reqs_table <- requisites %>%
filter(course == course_name)
reqs_table <- requisites_clewan %>%
filter(course == course_name)
reqs_table <- requisites_clean %>%
filter(course == course_name)
reqs_table
label_vec <- course_name
if(length(unique(as.integer(reqs_table$rqs_seq_num) %/% 100)) > 1){
label_vec <- append(label_vec, "all of")
}
label_vec
level_vec <- as.integer(reqs_table$rqs_seq_num) %/% 100
level_vec
course_name <- "MATH 32B"
reqs_table <- requisites %>%
filter(course == course_name)
label_vec <- course_name
level_vec <- as.integer(reqs_table$rqs_seq_num) %/% 100
course_name <- "MATH 32B"
reqs_table <- requisites_clean %>%
filter(course == course_name)
label_vec <- course_name
level_vec <- as.integer(reqs_table$rqs_seq_num) %/% 100
level_vec
label_vec
if(length(unique(level_vec)) > 1){
label_vec <- append(label_vec, "all of")
}
label_vec
course_name <- "A&O SCI 90"
reqs_table <- requisites_clean %>%
filter(course == course_name)
label_vec <- course_name
level_vec <- as.integer(reqs_table$rqs_seq_num) %/% 100
reqs_table
for(thing in reqs_table){print(thing)}
reqs_table[1,]
i <- 1
curr_row <- reqs_table[i,]
curr_row
paren_row <- !is.na(curr_row$left_paren_3, curr_row$left_paren_2, curr_row$left_paren_1)
curr_row[,"left_paren_3"]
paren_row <- !is.na(curr_row[, c("left_paren_3", "left_paren_2", "left_paren_1")]
reqs_table[1,]$left_paren_1
}
}
label <- c(
"A&O SCI 90", "all of", "1 of", "EPS SCI 71", "C&EE 20M", "COMPTNG 10A",
"1 of", "all of", "MATH 3A", "MATH 3B", "all of", "MATH 31A", "MATH 31B",
"1 of", "PHYSICS 1A", "PHYSICS 5A", "PHYSICS 6A"
)
# let's try to calcuate the complexity score
in_class_print <- function(course_name, requisites = requisites_proper){
req_list <- get_immediate_reqs(course_name)
# or_count <- req_list$or_count
for(req in req_list$reqs){
cat(req, sep = "\n")
in_class_print(req)
}
}
in_class <- function(course_name){
sort(unique(capture.output(in_class_print(course_name))))
# sink()
}
out_class <- function(course_name){
return(nrow(requisites_proper %>% filter(reqs == course_name)))
}
paren_row <- !is.na(curr_row[, c("left_paren_3", "left_paren_2", "left_paren_1")]
reqs_table[1,]$left_paren_1
}
}
label <- c(
"A&O SCI 90", "all of", "1 of", "EPS SCI 71", "C&EE 20M", "COMPTNG 10A",
"1 of", "all of", "MATH 3A", "MATH 3B", "all of", "MATH 31A", "MATH 31B",
"1 of", "PHYSICS 1A", "PHYSICS 5A", "PHYSICS 6A"
)
# let's try to calcuate the complexity score
in_class_print <- function(course_name, requisites = requisites_proper){
req_list <- get_immediate_reqs(course_name)
# or_count <- req_list$or_count
for(req in req_list$reqs){
cat(req, sep = "\n")
in_class_print(req)
}
}
in_class <- function(course_name){
sort(unique(capture.output(in_class_print(course_name))))
# sink()
}
out_class <- function(course_name){
return(nrow(requisites_proper %>% filter(reqs == course_name)))
}
curr_row <- reqs_table[i,]
curr_row
paren_row <- !is.na(curr_row[, c("left_paren_3", "left_paren_2", "left_paren_1")])
paren_row
?append
append(letters, "a", "b")
right_paren <- !is.na(curr_row[, c("right_paren_3", "right_paren_2", "right_paren_1")])
reqs_table %>% View()
sum(paren_row)
sum(left_paren)
left_paren <- !is.na(curr_row[, c("left_paren_3", "left_paren_2", "left_paren_1")])
right_paren <- !is.na(curr_row[, c("right_paren_3", "right_paren_2", "right_paren_1")])
i <- 4
curr_row <- reqs_table[i,]
curr_row
left_paren <- !is.na(curr_row[, c("left_paren_3", "left_paren_2", "left_paren_1")])
right_paren <- !is.na(curr_row[, c("right_paren_3", "right_paren_2", "right_paren_1")])
left_paren
sum(left_paren)
level_vec
level_vec <- as.integer(reqs_table$rqs_seq_num) %/% 100
level_vec
course_name <- "MATH 32B"
reqs_table <- requisites_clean %>%
filter(course == course_name)
label_vec <- course_name
label_vec
reqs_table
level_vec <- as.integer(reqs_table$rqs_seq_num) %/% 100
if(length(unique(level_vec)) > 1){
label_vec <- append(label_vec, "all of")
}
level_vec
label_vec
for(i in 1:nrow(reqs_table)){
curr_row <- reqs_table[i,]
left_paren <- !is.na(curr_row[, c("left_paren_3", "left_paren_2", "left_paren_1")])
right_paren <- !is.na(curr_row[, c("right_paren_3", "right_paren_2", "right_paren_1")])
if((length(unique(level_vec)) == 1) & (i == 1)){
if(curr_row$lgc_conn_cd == "OR"){
label_vec <- append(label_vec, "1 of")
} else if(curr_row$lgc_conn_cd == "AND"){
label_vec <- append(label_vec, "all of")
} else {
label_vec <- append(label_vec, course_name)
}
}
}
label_vec
label_vec <- course_name
for(i in 1:nrow(reqs_table)){
curr_row <- reqs_table[i,]
left_paren <- !is.na(curr_row[, c("left_paren_3", "left_paren_2", "left_paren_1")])
right_paren <- !is.na(curr_row[, c("right_paren_3", "right_paren_2", "right_paren_1")])
if((length(unique(level_vec)) == 1) & (i == 1)){
if(curr_row$lgc_conn_cd == "OR"){
label_vec <- append(label_vec, "1 of", course_name)
} else if(curr_row$lgc_conn_cd == "AND"){
label_vec <- append(label_vec, "all of", course_name)
} else {
label_vec <- append(label_vec, course_name)
}
} else if((length(unique(level_vec)) == 1) & (i != 1)){
label_vec <- append(label_vec, course_name)
}
}
